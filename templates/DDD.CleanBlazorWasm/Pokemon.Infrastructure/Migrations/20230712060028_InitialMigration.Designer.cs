// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pokemon.Infrastructure.Persistence;

#nullable disable

namespace Pokemon.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230712060028_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Pokemon.Domain.PokemonAggregate.PocketMonster", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Experience")
                        .HasColumnType("integer");

                    b.Property<int>("ExperienceToNextLevel")
                        .HasColumnType("integer");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Sprite")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Pokemons", (string)null);
                });

            modelBuilder.Entity("Pokemon.Domain.UserAggregate.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Revoked")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("Pokemon.Domain.UserAggregate.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedOnUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("RefreshTokenId")
                        .HasColumnType("uuid")
                        .HasColumnName("RefreshTokenId");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Pokemon.Domain.PokemonAggregate.PocketMonster", b =>
                {
                    b.OwnsMany("Pokemon.Domain.Common.PokemonAggregate.Entities.Ability", "Abilities", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("AbilityId");

                            b1.Property<Guid>("PokemonId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("Id", "PokemonId");

                            b1.HasIndex("PokemonId");

                            b1.ToTable("PokemonAbilities", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("PokemonId");
                        });

                    b.OwnsMany("Pokemon.Domain.Common.PokemonAggregate.Entities.Evolutions", "Evolutions", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("EvolutionId");

                            b1.Property<Guid>("PokemonId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("Id", "PokemonId");

                            b1.HasIndex("PokemonId");

                            b1.ToTable("PokemonEvolutions", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("PokemonId");
                        });

                    b.OwnsMany("Pokemon.Domain.Common.PokemonAggregate.Entities.Move", "Moves", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("MoveId");

                            b1.Property<Guid>("PokemonId")
                                .HasColumnType("uuid");

                            b1.Property<float>("CriticalHitChance")
                                .HasColumnType("real");

                            b1.Property<float>("CriticalHitFactor")
                                .HasColumnType("real");

                            b1.Property<float>("Damage")
                                .HasColumnType("real");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("Id", "PokemonId");

                            b1.HasIndex("PokemonId");

                            b1.ToTable("PokemonMoves", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("PokemonId");
                        });

                    b.OwnsMany("Pokemon.Domain.Common.PokemonAggregate.Entities.Stat", "Stats", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid")
                                .HasColumnName("StatId");

                            b1.Property<Guid>("PokemonId")
                                .HasColumnType("uuid");

                            b1.Property<int>("BaseStat")
                                .HasColumnType("integer");

                            b1.Property<int>("Effort")
                                .HasColumnType("integer");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("Id", "PokemonId");

                            b1.HasIndex("PokemonId");

                            b1.ToTable("PokemonStats", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("PokemonId");
                        });

                    b.Navigation("Abilities");

                    b.Navigation("Evolutions");

                    b.Navigation("Moves");

                    b.Navigation("Stats");
                });

            modelBuilder.Entity("Pokemon.Domain.UserAggregate.User", b =>
                {
                    b.OwnsMany("Pokemon.Domain.UserAggregate.ValueObjects.UserId", "FriendIds", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Value")
                                .HasColumnType("uuid")
                                .HasColumnName("FriendId");

                            b1.HasKey("Id");

                            b1.HasIndex("UserId");

                            b1.ToTable("FriendIds", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("FriendIds");
                });
#pragma warning restore 612, 618
        }
    }
}
