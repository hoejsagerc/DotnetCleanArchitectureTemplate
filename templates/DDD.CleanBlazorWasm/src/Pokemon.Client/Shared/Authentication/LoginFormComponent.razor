@inject ApiClientV1 _client
@inject AuthenticationStateProvider _authProvider
@inject ILocalStorageService _localStorage
@inject NavigationManager _navigationManager
@inject ISnackbar _snackbar


<MudCard>
    <MudForm Model="@loginRequest" @ref="@form" @bind-IsValid="@success" ValidationDelay="0">
        <MudCardContent>
            <MudTextField Label="Email" Class="mt-3" Immediate="true" HelperText="Enter your email"
                        @bind-Value="loginRequest.Email" For="@(() => loginRequest.Email)" Required="true" RequiredError="Email is required"
                        InputType="InputType.Email" />

            <MudTextField Label="Password" HelperText="Enter your password" Class="mt-3" Immediate="true"
                        @bind-Value="loginRequest.Password" For="@(() => loginRequest.Password)" InputType="InputType.Password" Required="true" RequiredError="Password is required"/>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Disabled="@(!success)" Color="Color.Primary" Class="ml-auto"
                        OnClick="@(async () => await Submit())">Login</MudButton>
        </MudCardActions>
    </MudForm>
</MudCard>


@code{
    MudForm form = new MudForm();
    private LoginRequest loginRequest = new LoginRequest();
    bool success;

    public async Task Submit()
    {
        await form.Validate();

        if (form.IsValid)
        {
            AuthenticationResponse authResult = new();

            authResult = await _client.LoginAsync(loginRequest);

            if (authResult.Token != string.Empty)
            {
                await _localStorage.SetItemAsync("jwtToken", authResult.Token);
                await _localStorage.SetItemAsync("refreshToken", authResult.RefreshToken);
                await _authProvider.GetAuthenticationStateAsync();

                _navigationManager.NavigateTo("/");

                _snackbar.Clear();
                _snackbar.Add("Successfully logged in", Severity.Success);
            }
        }
    }
}