@inject IAuthClient _authClient
@inject AuthenticationStateProvider _authProvider
@inject ILocalStorageService _localStorage
@inject NavigationManager _navigationManager
@inject ISnackbar _snackbar
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

<MudForm class="mt-4" Model="@updateUserRequest" @ref="@form" @bind-IsValid="@success" ValidationDelay="0">

    <MudPaper Class="pa-4">
        <MudStack Justify="Justify.Center">

                <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3" Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))"
                            @bind-Value="updateUserRequest.Password" For="@(() => updateUserRequest.Password)"
                            Immediate="true" InputType="InputType.Password" Required="true" RequiredError="Password is required"/>

                <MudTextField Label="Password" HelperText="Repeat the password" Class="mt-3" Validation="@(new Func<string, string>(PasswordMatch))"
                            @bind-Value="updateUserRequest.ConfirmPassword" For="@(() => updateUserRequest.Password)" InputType="InputType.Password"
                            Immediate="true" Required="true" RequiredError="Password is required"/>

        </MudStack>
    </MudPaper>
    <MudPaper Class="pa-4">
        <MudStack Justify="Justify.Center">
            <MudButton Variant="Variant.Filled" Disabled="@(!success)" Color="Color.Primary" Class="m-auto"
                        OnClick="@(async () => await Submit())">Update</MudButton>
        </MudStack>
    </MudPaper>

</MudForm>


@code {
    MudForm form = new MudForm();
    bool success;
    UpdateUserRequest updateUserRequest = new();
    private ServiceResponse<AuthenticationResponse>? response { get; set; }
    private AuthenticationResponse? authResult { get; set; }

    public async Task Submit()
    {
        await form.Validate();

        if (form.IsValid)
        {
            response = await _authClient.UpdatePasswordAsync(updateUserRequest);

            if (response.StatusCode == 204)
            {
                _snackbar.Add("sucessfully updated password", Severity.Success);
                await _authProvider.GetAuthenticationStateAsync();
                _navigationManager.NavigateTo("/", true);
            }
            else {
                _snackbar.Add("Critical Error - An unforseen error occured", Severity.Error);
            }
        }
    }


    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string? PasswordMatch(string arg)
    {
        if (updateUserRequest.Password != arg)
        {
            return "Passwords don't match";
        }
        return null;
    }
}