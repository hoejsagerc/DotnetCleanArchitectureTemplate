@inherits LayoutComponentBase
@inject AuthenticationStateProvider _authProvider
@inject IAuthClient _authClient
@inject NavigationManager _navigationManager

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="0">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudSpacer />
        <AuthorizeView>
            <Authorized>
                <MudText Class="mr-3" Typo="Typo.h6">Hi @context.User.Identity!.Name</MudText>
                <MudMenu Icon="@Icons.Material.Filled.AccountCircle" Size="Size.Large" Color="Color.Inherit" Disabled="false" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
                    <MudMenuItem Href="/account/manage/overview">View my account</MudMenuItem>
                    <MudMenuItem OnClick="@Logout">Sign out</MudMenuItem>
                </MudMenu>
            </Authorized>
            <NotAuthorized>
                <MudMenu Icon="@Icons.Material.Filled.AccountCircle" Size="Size.Large" Color="Color.Inherit" Disabled="false" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
                    <MudMenuItem Href="/account/login">Sign in</MudMenuItem>
                    <MudMenuItem Href="/account/register">Register</MudMenuItem>
                </MudMenu>
            </NotAuthorized>
        </AuthorizeView>
    </MudAppBar>
    <MudDrawer ClipMode="DrawerClipMode.Always" @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">Manage Account</MudText>
        </MudDrawerHeader>
        <IdentityNavMenu />
    </MudDrawer>
    <MudMainContent>
        <MudContainer>
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private async Task Logout()
    {
        await _authClient.LogoutAsync();
        _navigationManager.NavigateTo("/", true);
        await _authProvider.GetAuthenticationStateAsync();
    }
}